# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# siehe app.module.ts

schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Bücherdaten zu lesen"
type Query {
  aerzte(suchkriterien: SuchkriterienInput): [Arzt!]

  arzt(id: ID!): Arzt
}

"Funktionen, um Bücher neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: ArztInput!): CreatePayload

  update(input: ArztUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  token(username: String!, password: String!): TokenResult
  refresh(refresh_token: String!): TokenResult
}

"Daten zum Praxis eines Arztes"
type Praxis {
  praxis: String!
  adresse: String
  telefonnummer: String
  homepage: String
}

"Daten zum Patienten eines Arztes"
type Patient {
  name: String!
  geburtsdatum: String!
  telefonnummer: String
  adresse: String
}

"Datenschema zu einem Arzt, das gelesen wird"
type Arzt {
  # ID ist bei Apollo ein String
  id: Int!
  version: Int!
  name: String
  fachgebiet: String
  geburtsdatum: String
  # 1:1-Beziehung
  praxis: Praxis!
  patienten: [Patient]!
}

"Enum-Typ für die Art eines Arztes"
enum Art {
  KARDIOLOGIE
  RADIOLOGIE
  CHIRURGIE
}

"Suchkriterien für Bücher"
input SuchkriterienInput {
  praxis: String
  name: String
  fachgebiet: String
}

"Daten zum Praxis eines neuen Arztes"
input PraxisInput {
  praxis: String!
  adresse: String
  telefonnummer: String
  email: String
}

"Daten zu den Patienten eines Arztes"
input PatientInput {
  name: String!
  geburtsdatum: String!
  telefonnummer: String
  adresse: String
}

"Daten für ein neuen Arzt"
input ArztInput {
  name: String!
  fachgebiet: String!
  geburtsdatum: String
  telefonnummer: String
  praxis: PraxisInput!
  patienten: [PatientInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu ändernden Arztes#"
input ArztUpdateInput {
  id: ID
  version: Int
  name: String
  fachgebiet: String
  telefonnummer: String
  geburtsdatum: String
}

type UpdatePayload {
  version: Int
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
}
